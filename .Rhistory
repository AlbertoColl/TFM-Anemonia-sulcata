plot(g1)
a <- c(1,2, 2,3, 3,1 )
g1 <- graprh(c("John", "Jean", "Jim"), )
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), n = 3, directed = F)
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), directed = F)
plot(g1)
g1
E(g1)
View(g1)
V(g1)
g1[]
install.packages("enaR")
library("enaR")
version
sessioninfo()
sessionInfo()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(broom)
library(car)
library(multcompView)
ggthemr("fresh")
### SETUP ----
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
### SETUP ----
library(tidyverse)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("D:\collf\Documents")
setwd("D:\collf\Documents")
setwd("D:/collf/Documents")
datos <- read.csv("Results.csv")
View(datos)
hist(datos, Area)
hist(datos$Area)
library(ggplot2)
p <- ggplot(datos) +
geom_histogram(aes(x = Area))
(p <- ggplot(datos) +
geom_histogram(aes(x = Area))
)
geom_histogram(aes(x = log(Area))
(p <- ggplot(datos) +
(p <- ggplot(datos) +
geom_histogram(aes(x = log(Area)))
)
(p <- ggplot(datos) +
geom_point(aes(x = Area, y = Circ.))
)
(p <- ggplot(datos) +
geom_point(aes(x = log(Area), y = Circ.))
)
install.packages("installr")
library(installr)
updateR()
installed.packages()
install.packages("tidyverse")
### SETUP ----
library(tidyverse)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
datos <- read.csv2("./datos/datos_peso.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
# Necesito poner inicial y final como otra variable, medida
datos <- datos %>% gather(c(peso.inicial, peso.final), key = medida, value = peso)
datos$medida <- as.factor(datos$medida)
levels(datos$medida) <- c("final", "inicial")
datos$medida <- factor(datos$medida, levels = c("inicial", "final"))
datos$tratamiento <- factor(datos$tratamiento, levels = c("Control", "Oscuro", "Salobre", "IMTA"))
summary(datos)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
datos <- read.csv2("./datos/datos_peso.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
summary(datos)
error <- sd(peso.inicial, na.rm = T)/sqrt(sum(|is.na(peso)))
error <- sd(peso.inicial, na.rm = T)/sqrt(sum(!is.na(peso)))
error <- sd(datos$peso.inicial, na.rm = T)/sqrt(sum(!is.na(datos$peso.inicial)))
error
error <- sd(datos$peso.final, na.rm = T)/sqrt(sum(!is.na(datos$peso.final)))
error
### Resumen y grafica ----
resumen <- datos %>%
group_by(tratamiento, medida) %>%
summarise(media = mean(peso, na.rm = T),
desvest = sd(peso, na.rm = T),
error = desvest/sqrt(sum(!is.na(peso))),
n = sum(!is.na(peso)))
# Necesito poner inicial y final como otra variable, medida
datos <- datos %>% gather(c(peso.inicial, peso.final), key = medida, value = peso)
datos$medida <- as.factor(datos$medida)
levels(datos$medida) <- c("final", "inicial")
datos$medida <- factor(datos$medida, levels = c("inicial", "final"))
datos$tratamiento <- factor(datos$tratamiento, levels = c("Control", "Oscuro", "Salobre", "IMTA"))
summary(datos)
### Resumen y grafica ----
resumen <- datos %>%
group_by(tratamiento, medida) %>%
summarise(media = mean(peso, na.rm = T),
desvest = sd(peso, na.rm = T),
error = desvest/sqrt(sum(!is.na(peso))),
n = sum(!is.na(peso)))
summary(resumen)
### Resumen y grafica ----
resumen <- datos %>%
group_by(tratamiento, medida) %>%
summarise(media = mean(peso, na.rm = T),
desvest = sd(peso, na.rm = T),
error = desvest/sqrt(sum(!is.na(peso))),
n = sum(!is.na(peso)),
mediana = median(peso, na.rm = T),
minimo = min(peso, na.rm =T),
maximo = max(peso, na.rm = T))
### SETUP ----
library(tidyverse)
library(car)
library(multcompView)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
source(file = "./scripts/1_funciones_graficas.R")
ggthemr("fresh")
### Exploracion y outliers ----
# Outliers potenciales:
datos$MDA.tent[17] <- NA # Es claramente un error de medida
datos$MDA.tent[5] # Bastante elevado para su grupo QUITAR
datos$CAT.tent[20] <- NA # Bastante elevado en general
datos$CAT.pie[8] <- NA # Desorbitado para el grupo y general
datos$CAT.pie[16] <- NA # Desorbitado para el grupo y general
datos$proteina.tent[20] # Valor de proteina muy bajo, igual cambia otras variables, QUITAR
datos$GST.tent[9] <- NA # outlier clarisimo
datos$GST.tent[10] # se desvia bastante del resto de medidas, QUITAR
datos$GST.pie[8] <- NA # outlier clarisimo
datos$clorofila.total[8] <- NA # Bastante desorbitado
datos$SOD.pie[20] <- NA # outlier, posiblemente afecta al analisis
datos$SOD.tent[16] <- NA #outlier, enmascara diferencias
datos$SOD.tent[5] <- NA #outlier, enmascara diferencias
ggplot(datos) +
geom_histogram(aes(x = SOD.tent), bins = 16) +
theme_tfm()
ggplot(datos) +
geom_boxplot(aes(y = CAT.pie, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("DTD.pie") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
### Ajuste modelo ----
# Nos quedamos con la primera o la segunda medida de MDA?
datos <- datos %>% select(-c(MDA.pie, MDA.tent))
# Ajustar modelo con lapply(). sapply() solia funcionar pero ya no no se por que
modelos <- lapply(colnames(datos[c(4:18)]), function(x){
aov(formula = as.formula(paste0(x, " ~ tratamiento")), datos)})
# Falta: pruebas de normalidad de residuos y homocedasticidad
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # Todo bien mientras se quiten esos outliers
sapply(modelos, function(x){
print(leveneTest(x))
}) #  Las graficas por algun motivo no funcionan pero en test de levene esta to bien
for (i in c(1:13)) {
print(colnames(datos[4:18][i]))
print(summary(modelos[[i]]))
}
#Hay diferencias en SOD.tent, TEAC.pie, y proteina.tent. SOD pie y DTD pie marginalmente significativo.
n <- 3
i <- colnames(datos[4:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
View(tabla_summ)
(p <- barras_tfm())
366*2
506*2
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
# Bucle de construccion de resumen y graficas
for (n in c(2:15)) {
i <- colnames(datos[5:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
}
# Bucle de construccion de resumen y graficas
for (n in c(1:14)) {
i <- colnames(datos[5:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
}
ggplot(datos) +
geom_boxplot(aes(y = MDA.pie.2, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("DTD.pie") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
ggplot(datos) +
geom_boxplot(aes(y = MDA.pie.2, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("MDA.pie.2") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
View(datos)
datos$MDA.pie.2[19] <- NA #outlier, sale mucho error por su culpa
ggplot(datos) +
geom_boxplot(aes(y = MDA.pie.2, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("MDA.pie.2") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
# Nos quedamos con la primera o la segunda medida de MDA?
datos <- datos %>% select(-c(MDA.pie, MDA.tent))
# Ajustar modelo con lapply(). sapply() solia funcionar pero ya no no se por que
modelos <- lapply(colnames(datos[c(4:18)]), function(x){
aov(formula = as.formula(paste0(x, " ~ tratamiento")), datos)})
# Falta: pruebas de normalidad de residuos y homocedasticidad
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # Todo bien mientras se quiten esos outliers
sapply(modelos, function(x){
print(leveneTest(x))
}) #  Las graficas por algun motivo no funcionan pero en test de levene esta to bien
ggplot(datos) +
geom_boxplot(aes(y = TEAC.tent, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("TEAC.tent") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
ggplot(datos) +
geom_histogram(aes(x = TEAC.tent), bins = 16) +
theme_tfm()
ggplot(datos) +
geom_violin(aes(y = TEAC.tent, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("TEAC.tent") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
for (i in c(1:13)) {
print(colnames(datos[4:18][i]))
print(summary(modelos[[i]]))
}
for (i in c(1:15)) {
print(colnames(datos[4:18][i]))
print(summary(modelos[[i]]))
}
# Bucle de construccion de resumen y graficas
for (n in c(1:14)) {
i <- colnames(datos[5:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
}
# Bucle de construccion de resumen y graficas
for (n in c(1:14)) {
i <- colnames(datos[5:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
}
# Bucle de construccion de resumen y graficas
for (n in c(1:15)) {
i <- colnames(datos[4:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 1000, units = "px",
scale = 2, dpi = "retina")
}
m <- 1
n <- 1
i <- colnames(datos[4:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
391*2
359*2
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 730, height = 730, units = "px",
scale = 2, dpi = "retina")
### SETUP ----
library(tidyverse)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
datos <- read.csv2("./datos/datos_peso.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
summary(datos)
# Necesito poner inicial y final como otra variable, medida
datos <- datos %>% gather(c(peso.inicial, peso.final), key = medida, value = peso)
datos$medida <- as.factor(datos$medida)
levels(datos$medida) <- c("final", "inicial")
datos$medida <- factor(datos$medida, levels = c("inicial", "final"))
datos$tratamiento <- factor(datos$tratamiento, levels = c("Control", "Oscuro", "Salobre", "IMTA"))
summary(datos)
### Resumen y grafica ----
resumen <- datos %>%
group_by(tratamiento, medida) %>%
summarise(media = mean(peso, na.rm = T),
desvest = sd(peso, na.rm = T),
error = desvest/sqrt(sum(!is.na(peso))),
n = sum(!is.na(peso)),
mediana = median(peso, na.rm = T),
minimo = min(peso, na.rm =T),
maximo = max(peso, na.rm = T))
(plot <- ggplot(resumen, aes(x = tratamiento)) +
geom_errorbar(aes(ymax = media + error, ymin = media-error, group = tratamiento:medida), position = position_dodge(width = 0.93), width = 0.7, color = "gray75") +
geom_col(aes(y = media, fill = tratamiento:medida), position = position_dodge(width = 0.93)) +
geom_text(aes(y =  1.5 ,label = paste0("n = ", n), group = tratamiento:medida), position = position_dodge(width = 0.93), color = "white") +
geom_text(aes(y =  3 ,label = medida, group = tratamiento:medida), position = position_dodge(width = 0.93), color = "white") +
ylab("Peso medio (g)") +
xlab(NULL) +
labs(title = "Peso medio inicial y final, por tratamiento") +
theme_tfm() +
scale_fill_manual(values = c("#0c8890", "#0C9CA6", "#3EB59B", "#47D2B4", "#E56A1C", "#F37629", "#F9AB24", "#FBBC4C"))
)
ggsave("./resultados/graficas/peso_n.png", width = 1000, height = 750, units = "px",
scale = 2, dpi = "retina")
datos <- read.csv2("./datos/TFM_datos.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
barras_tfm <- function(){
ggplot(tabla_summ) +
geom_errorbar(aes(x = tratamiento, ymax = media + error, ymin = media- error), width = 0.7, color = "gray55") +
geom_col(aes(x = tratamiento, y = media, fill = tratamiento)) +
geom_text(aes(x = tratamiento, y = media + error, label = tukey),
color = "grey5", vjust = -0.5, size = 4) +
ylab(case_when(
i == "clorofila.total" ~ "μg clorofila /g tejido",
i == "proteina.tent" | i == "proteina.pie"  ~ " mg proteína / ml",
i == "MDA.pie" | i == "MDA.tent" ~ "μM  MDA",
i == "TEAC.pie" | i == "TEAC.tent"~ "μM equivalentes de Trolox",
i == "GST.pie" | i == "GSTtent" ~ "mU / mg  de proteína",
i == "DTD.pie" | i == "DTD.tent" ~ "mU / mg  de proteína",
TRUE ~ "U / mg  de proteína")) +
xlab("Tratamiento") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C", "#FBBC4C")) + # Colores 1
#scale_fill_manual(values = c("#414066", "#69B4AB", "#FBBC4C", "#EF476F")) + # Colores 2
#scale_fill_manual(values = c("#1E5D56", "#0C8890", "#3EB59B", "#FBBC4C")) + # Colores 3
theme_tfm()
}
### SETUP ----
library(tidyverse)
library(car)
library(multcompView)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
source(file = "./scripts/1_funciones_graficas.R")
ggthemr("fresh")
### Exploracion y outliers ----
# Outliers potenciales:
datos$MDA.tent[17] <- NA # Es claramente un error de medida
datos$MDA.tent[5] # Bastante elevado para su grupo QUITAR
datos$CAT.tent[20] <- NA # Bastante elevado en general
datos$CAT.pie[8] <- NA # Desorbitado para el grupo y general
datos$CAT.pie[16] <- NA # Desorbitado para el grupo y general
datos$proteina.tent[20] # Valor de proteina muy bajo, igual cambia otras variables, QUITAR
datos$GST.tent[9] <- NA # outlier clarisimo
datos$GST.tent[10] # se desvia bastante del resto de medidas, QUITAR
datos$GST.pie[8] <- NA # outlier clarisimo
datos$clorofila.total[8] <- NA # Bastante desorbitado
datos$SOD.pie[20] <- NA # outlier, posiblemente afecta al analisis
datos$SOD.tent[16] <- NA #outlier, enmascara diferencias
datos$SOD.tent[5] <- NA #outlier, enmascara diferencias
datos$MDA.pie.2[19] <- NA #outlier, sale mucho error por su culpa
ggplot(datos) +
geom_histogram(aes(x = TEAC.tent), bins = 16) +
theme_tfm()
ggplot(datos) +
geom_boxplot(aes(y = TEAC.tent, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("TEAC.tent") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
### Ajuste modelo ----
# Nos quedamos con la primera o la segunda medida de MDA?
datos <- datos %>% select(-c(MDA.pie, MDA.tent))
# Ajustar modelo con lapply(). sapply() solia funcionar pero ya no no se por que
modelos <- lapply(colnames(datos[c(4:18)]), function(x){
aov(formula = as.formula(paste0(x, " ~ tratamiento")), datos)})
# Falta: pruebas de normalidad de residuos y homocedasticidad
sapply(modelos, function(x){
shapiro.test(residuals(x))
}) # Todo bien mientras se quiten esos outliers
sapply(modelos, function(x){
print(leveneTest(x))
}) #  Las graficas por algun motivo no funcionan pero en test de levene esta to bien
for (i in c(1:15)) {
print(colnames(datos[4:18][i]))
print(summary(modelos[[i]]))
}
#Hay diferencias en SOD.tent, TEAC.pie, y proteina.tent. SOD pie y DTD pie marginalmente significativo.
# Bucle de construccion de resumen y graficas
for (n in c(1:15)) {
i <- colnames(datos[4:18])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm())
ggsave(paste0("./resultados/graficas/", i, ".png"), width = 800, height = 1000, units = "px", #para clorofila 730, 730
scale = 2, dpi = "retina")
}
for (i in c(1:15)) {
print(colnames(datos[4:18][i]))
print(summary(modelos[[i]]))
}
ggplot(datos) +
geom_boxplot(aes(y = GST.pie, x = tratamiento, fill = tratamiento), alpha = 0.6) +
#geom_jitter(aes(y = , x = tratamiento, color = tratamiento), width = 0.2) +
theme_tfm() +
ylab("GST.pie") +
scale_fill_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C")) +
scale_color_manual(values = c("#0c8890", "#3EB59B","#E56A1C",  "#FBBC4C"))
