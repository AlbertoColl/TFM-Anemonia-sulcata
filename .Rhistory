geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1,
color = "#637076") +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1,
color = "#637076") +
geom_hline(yintercept = 0)
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1,
color = "#637076") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1) +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "gray") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#98785D") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#313D3F") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
colourpicker:::colourPickerAddin()
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "##383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 9) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
ggsave("C:\Users\collf\Documents\plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500, limitsize = F)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
setwd("C:/Users/collf/Documents/")
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
# Y ahora lapply los modelos + tidy/glance para sacar parametros, error y r2
lm_estimates <- lapply(by_species, function(x){
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
})
View(lm_estimates)
lm_estimates
lm_goodness <- lapply(by_species, function(x){
broom::glance(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1,1:2]
})
lm_goodness
mt <- matrix(1:6,3,2)
mt[,-1]
a <- c(3,0,T)
b <- c(4,0,F)
c <- (a|b)
c
x <- c(2L, 3L, 4L, 15L, 23L, 43L)
typeof(median(x))
x <- as.Date("2018-10-01")
x
months(x)
month(x)
v <- 1:·
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- 4
v
install.packages("igraph")
v1 <- 1:5
v2 <- rep(1,5)
v1+v2
v2 <- v1+v2
v2 <- v1+v2
v2 <- v1+v2
cor(v1,v2)
library(igraph)
g1 <- graph(edges = c(1,2, 2,3, 3,1 ), n = 3)
g1
plot(g1)
a <- c(1,2, 2,3, 3,1 )
g1 <- graprh(c("John", "Jean", "Jim"), )
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), n = 3, directed = F)
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), directed = F)
plot(g1)
g1
E(g1)
View(g1)
V(g1)
g1[]
install.packages("enaR")
library("enaR")
version
sessioninfo()
sessionInfo()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(broom)
library(car)
library(multcompView)
ggthemr("fresh")
### SETUP ----
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
### SETUP ----
library(tidyverse)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("D:\collf\Documents")
setwd("D:\collf\Documents")
setwd("D:/collf/Documents")
datos <- read.csv("Results.csv")
View(datos)
hist(datos, Area)
hist(datos$Area)
library(ggplot2)
p <- ggplot(datos) +
geom_histogram(aes(x = Area))
(p <- ggplot(datos) +
geom_histogram(aes(x = Area))
)
geom_histogram(aes(x = log(Area))
(p <- ggplot(datos) +
(p <- ggplot(datos) +
geom_histogram(aes(x = log(Area)))
)
(p <- ggplot(datos) +
geom_point(aes(x = Area, y = Circ.))
)
(p <- ggplot(datos) +
geom_point(aes(x = log(Area), y = Circ.))
)
install.packages("installr")
library(installr)
updateR()
installed.packages()
install.packages("tidyverse")
install.packages("psych")
library(psych)
## SETUP ----
library(tidyverse)
library(GGally) # Correlograma
library(ggvegan)# Biplot
library(vegan) #PCA
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
source(file = "./scripts/1_funciones_graficas.R")
ggthemr("fresh")
# Seleccionar variables que incluir en el PCA. ¿Probar separando pie y tentaculo?
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)) # Clorofila, peso, proteina y TEAC no son muy relevantes parece ser
# Hacer matriz de correlacion
# Ordenar luego manualmente variables segun relevancia en PCA para la grafica
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Ejecutar PCA
PCA <- rda(na.omit(datos_pca), scale = TRUE)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:4]) # queremos un 80%
### Graficas y resultados PCA ----
#Extraer eigenvalues y hacer Scree plot bonico con ggplot
eigenvalues <- as.data.frame(PCA$CA$eig) %>%
rename("eigenvalue"="PCA$CA$eig") %>%
mutate(var_per = eigenvalue/sum(eigenvalue)) %>%
rownames_to_column(var = "PC")
ggplot(eigenvalues, aes(x = PC,y = var_per)) +
geom_line(group = 1, color = "#3EB59B") +
geom_point(size = 3, color = "#0c8890") +
theme_tfm() +
scale_y_continuous(labels = scales::percent, limits = c(0,0.5)) +
xlab("Compontenes Principales") +
ylab("% de variación explicada")
# Factor loadings, exportar en csv para hacer tabla
write.csv2(as.data.frame(PCA[["CA"]][["v"]]), "./resultados/PCA_factor_loadings.csv")
#Biplot, ver si puedes cambiar componentes
biplot(PCA, choices = c(1,2), type = c("text", "points"),
col = c("#0c8890", "#414066"), scaling = 1)
# Esto con formato ggplot
autoplot(PCA, arrows = T) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
ggplot() +
geom_point(data = filter(PCA_df, Score == "observation"),
aes(x = PC1, y = PC2), size = 2.5, alpha = 0.9) +
geom_segment(data = filter(PCA_df, Score == "variable"),
aes(x = 0, y = 0, xend = PC1, yend = PC2),
color = "#E56A1C", arrow  =arrow(length=unit(0.3,"cm"))) +
geom_text(data = filter(PCA_df, Score == "variable"),
aes(x = PC1, y = PC2, label = Label), alpha = 0.75,
position = "jitter" ) +
ylim(c(-2, 2)) +
xlim(c(-2.5,2.5)) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
PCA_df <- fortify(PCA) %>%
mutate(Score = ifelse(Score == "species", "variable", "observation"))
ggplot() +
geom_point(data = filter(PCA_df, Score == "observation"),
aes(x = PC1, y = PC2), size = 2.5, alpha = 0.9) +
geom_segment(data = filter(PCA_df, Score == "variable"),
aes(x = 0, y = 0, xend = PC1, yend = PC2),
color = "#E56A1C", arrow  =arrow(length=unit(0.3,"cm"))) +
geom_text(data = filter(PCA_df, Score == "variable"),
aes(x = PC1, y = PC2, label = Label), alpha = 0.75,
position = "jitter" ) +
ylim(c(-2, 2)) +
xlim(c(-2.5,2.5)) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
outlier(datos_pca)
View(datos_pca)
View(datos)
ggplot() +
geom_point(data = filter(PCA_df, Score == "observation"),
aes(x = PC1, y = PC2), size = 2.5, alpha = 0.9) +
geom_segment(data = filter(PCA_df, Score == "variable"),
aes(x = 0, y = 0, xend = PC1, yend = PC2),
color = "#E56A1C", arrow  =arrow(length=unit(0.3,"cm"))) +
geom_text(data = filter(PCA_df, Score == "variable"),
aes(x = PC1, y = PC2, label = Label), alpha = 0.75,
position = "jitter" ) +
ylim(c(-2, 2)) +
xlim(c(-2.5,2.5)) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
outlier(datos_pca) # Calcula Distancia de Mahalanobis y hace QQ plot con cuantiles de la chi cuadrado. El unico que parece un outlier mas gordo es el O4, observacion numero 9, desde un punto de vista multivariable.
View(datos_pca)
datos_pca <- datos_pca[-c(9)]
datos_pca <- datos_pca[-c(9)]
datos_pca <- as.data.frame(datos_pca[-c(9)])
View(datos_pca)
datos_pca <- datos_pca[-c(9), ]
# Seleccionar variables que incluir en el PCA. ¿Probar separando pie y tentaculo?
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)) # Clorofila, peso, proteina y TEAC no son muy relevantes parece ser
outlier(datos_pca) # Calcula Distancia de Mahalanobis y hace QQ plot con cuantiles de la chi cuadrado. El unico que parece un outlier mas gordo es el O4, observacion numero 9, desde un punto de vista multivariable.
datos_pca <- datos_pca[-c(9), ]
View(datos_pca)
outlier(datos_pca) # Calcula Distancia de Mahalanobis y hace QQ plot con cuantiles de la chi cuadrado. El unico que parece un outlier mas gordo es el O4, observacion numero 9, desde un punto de vista multivariable.
datos_pca <- datos_pca[-c(9), ]
outlier(datos_pca) # Calcula Distancia de Mahalanobis y hace QQ plot con cuantiles de la chi cuadrado. El unico que parece un outlier mas gordo es el O4, observacion numero 9, desde un punto de vista multivariable.
datos_pca <- datos_pca[-c(8), ]
outlier(datos_pca) # Calcula Distancia de Mahalanobis y hace QQ plot con cuantiles de la chi cuadrado. El unico que parece un outlier mas gordo es el O4, observacion numero 9, desde un punto de vista multivariable.
# Seleccionar variables que incluir en el PCA. ¿Probar separando pie y tentaculo?
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)) # Clorofila, peso, proteina y TEAC no son muy relevantes parece ser
datos_pca <- datos_pca[-c(9), ]
# Hacer matriz de correlacion
# Ordenar luego manualmente variables segun relevancia en PCA para la grafica
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Ejecutar PCA
PCA <- rda(na.omit(datos_pca), scale = TRUE)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:4]) # queremos un 80%
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:3]) # queremos un 80%
### Graficas y resultados PCA ----
#Extraer eigenvalues y hacer Scree plot bonico con ggplot
eigenvalues <- as.data.frame(PCA$CA$eig) %>%
rename("eigenvalue"="PCA$CA$eig") %>%
mutate(var_per = eigenvalue/sum(eigenvalue)) %>%
rownames_to_column(var = "PC")
ggplot(eigenvalues, aes(x = PC,y = var_per)) +
geom_line(group = 1, color = "#3EB59B") +
geom_point(size = 3, color = "#0c8890") +
theme_tfm() +
scale_y_continuous(labels = scales::percent, limits = c(0,0.5)) +
xlab("Compontenes Principales") +
ylab("% de variación explicada")
#Biplot, ver si puedes cambiar componentes
biplot(PCA, choices = c(1,2), type = c("text", "points"),
col = c("#0c8890", "#414066"), scaling = 1)
ggplot() +
geom_point(data = filter(PCA_df, Score == "observation"),
aes(x = PC1, y = PC2), size = 2.5, alpha = 0.9) +
geom_segment(data = filter(PCA_df, Score == "variable"),
aes(x = 0, y = 0, xend = PC1, yend = PC2),
color = "#E56A1C", arrow  =arrow(length=unit(0.3,"cm"))) +
geom_text(data = filter(PCA_df, Score == "variable"),
aes(x = PC1, y = PC2, label = Label), alpha = 0.75,
position = "jitter" ) +
ylim(c(-2, 2)) +
xlim(c(-2.5,2.5)) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
datos_pca <- datos_pca[-c(9), ]
# Ejecutar PCA
PCA <- rda(na.omit(datos_pca), scale = TRUE)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:3]) # queremos un 80%
### Graficas y resultados PCA ----
#Extraer eigenvalues y hacer Scree plot bonico con ggplot
eigenvalues <- as.data.frame(PCA$CA$eig) %>%
rename("eigenvalue"="PCA$CA$eig") %>%
mutate(var_per = eigenvalue/sum(eigenvalue)) %>%
rownames_to_column(var = "PC")
ggplot(eigenvalues, aes(x = PC,y = var_per)) +
geom_line(group = 1, color = "#3EB59B") +
geom_point(size = 3, color = "#0c8890") +
theme_tfm() +
scale_y_continuous(labels = scales::percent, limits = c(0,0.5)) +
xlab("Compontenes Principales") +
ylab("% de variación explicada")
ggplot() +
geom_point(data = filter(PCA_df, Score == "observation"),
aes(x = PC1, y = PC2), size = 2.5, alpha = 0.9) +
geom_segment(data = filter(PCA_df, Score == "variable"),
aes(x = 0, y = 0, xend = PC1, yend = PC2),
color = "#E56A1C", arrow  =arrow(length=unit(0.3,"cm"))) +
geom_text(data = filter(PCA_df, Score == "variable"),
aes(x = PC1, y = PC2, label = Label), alpha = 0.75,
position = "jitter" ) +
ylim(c(-2, 2)) +
xlim(c(-2.5,2.5)) +
xlab(paste0("Componente Principal 1 (", round(eigenvalues$var_per[1]*100, 2) ,"%)")) +
ylab(paste0("Componente Principal 2 (", round(eigenvalues$var_per[2]*100, 2) ,"%)")) +
theme_tfm()
# Seleccionar variables que incluir en el PCA. ¿Probar separando pie y tentaculo?
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)) # Clorofila, peso, proteina y TEAC no son muy relevantes parece ser
# Ejecutar PCA
PCA <- rda(na.omit(datos_pca), scale = TRUE)
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:3]) # queremos un 80%
