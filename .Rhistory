theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1,
color = "#637076") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1) +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "gray") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#98785D") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#313D3F") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
colourpicker:::colourPickerAddin()
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "##383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 9) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
ggsave("C:\Users\collf\Documents\plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500, limitsize = F)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
setwd("C:/Users/collf/Documents/")
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
# Y ahora lapply los modelos + tidy/glance para sacar parametros, error y r2
lm_estimates <- lapply(by_species, function(x){
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
})
View(lm_estimates)
lm_estimates
lm_goodness <- lapply(by_species, function(x){
broom::glance(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1,1:2]
})
lm_goodness
mt <- matrix(1:6,3,2)
mt[,-1]
a <- c(3,0,T)
b <- c(4,0,F)
c <- (a|b)
c
x <- c(2L, 3L, 4L, 15L, 23L, 43L)
typeof(median(x))
x <- as.Date("2018-10-01")
x
months(x)
month(x)
v <- 1:Â·
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- 4
v
install.packages("igraph")
v1 <- 1:5
v2 <- rep(1,5)
v1+v2
v2 <- v1+v2
v2 <- v1+v2
v2 <- v1+v2
cor(v1,v2)
library(igraph)
g1 <- graph(edges = c(1,2, 2,3, 3,1 ), n = 3)
g1
plot(g1)
a <- c(1,2, 2,3, 3,1 )
g1 <- graprh(c("John", "Jean", "Jim"), )
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), n = 3, directed = F)
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), directed = F)
plot(g1)
g1
E(g1)
View(g1)
V(g1)
g1[]
install.packages("enaR")
library("enaR")
version
sessioninfo()
sessionInfo()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(broom)
library(car)
library(multcompView)
ggthemr("fresh")
### SETUP ----
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
### SETUP ----
library(tidyverse)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("D:\collf\Documents")
setwd("D:\collf\Documents")
setwd("D:/collf/Documents")
datos <- read.csv("Results.csv")
View(datos)
hist(datos, Area)
hist(datos$Area)
library(ggplot2)
p <- ggplot(datos) +
geom_histogram(aes(x = Area))
(p <- ggplot(datos) +
geom_histogram(aes(x = Area))
)
geom_histogram(aes(x = log(Area))
(p <- ggplot(datos) +
(p <- ggplot(datos) +
geom_histogram(aes(x = log(Area)))
)
(p <- ggplot(datos) +
geom_point(aes(x = Area, y = Circ.))
)
(p <- ggplot(datos) +
geom_point(aes(x = log(Area), y = Circ.))
)
install.packages("installr")
library(installr)
updateR()
installed.packages()
install.packages("tidyverse")
library(tidyverse)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
datos <- read.csv2("./datos/TFM_datos.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
View(datos)
# Reordenar tratamientos: Control, Oscuro, Salobre, IMTA
datos$tratamiento <- factor(datos$tratamiento, levels = c("Control", "Oscuro", "Salobre", "IMTA"))
library(GGally)
library(factoextra)
library(factoExtra)
install.packages("factoextra")
library(factoextra)
library(GGally)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
#source(file = "./scripts/0_data_lab.R") # Laboratorio
source(file = "./scripts/0_data_home.R") # En casa
ggthemr("fresh")
cor_matrix <- cor(datos[4:23]) # Matriz de correlacion para PCA
ggcorr(datos[4:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
## TEMA DE GRAFICAS ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 10),
plot.title = element_text(size = 18),
strip.text.x = element_text(size = 15, face = "bold", vjust = 0),
axis.title = element_text(size = 14),
legend.position = "none")
#strip.background = element_rect(colour = "black")
}
ggcorr(datos[4:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
source(file = "./scripts/1_funciones_graficas.R")
# Primer paso: normalizar datos con la funcion scale() y quitar columnas no numericas. En este analisis dan igual los tratamientos.
datos_pca <- scale(datos)
datos[3,23]
datos[3:23]
# Primer paso: normalizar datos con la funcion scale() y quitar columnas no numericas. En este analisis dan igual los tratamientos.
datos_pca <- scale(datos[4:23])
View(datos_pca)
?scale()
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos[4:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(datos_pca)
?princomp()
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(cor_matrix, scores = T)
View(cor_matrix)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(datos_pca ,na.action(na.omit()), scores = T)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
# Primer paso: normalizar datos con la funcion scale() y quitar columnas no numericas. En este analisis dan igual los tratamientos.
datos_pca <- scale(datos[5:23])
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos[5:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
View(datos_pca)
datos_pca %>% select(clorofila.total, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)
datos_pca <- scale(select(datos, clorofila.total, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)
)
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos[5:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos[5:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
ggcorr(datos[5:23], label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
fviz_eig(pca)
fviz_pca_var(pca)
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent, TEAC.pie, TEAC.tent)
)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
fviz_eig(pca)
fviz_pca_var(pca)
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent)
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
fviz_eig(pca)
fviz_pca_var(pca)
datos_pca <- scale(select(datos, CAT.pie, CAT.tent, GST.pie, GST.tent, MDA.pie, MDA.tent)
)
# Segundo paso: Hacer matriz de correlacion
cor_matrix <- cor(datos_pca) # Matriz de correlacion para PCA
ggcorr(datos_pca, label = F, label_alpha = T,
hjust = 0.75, size = 3, color = "grey50", layout.exp = 1,
high = "#3EB59B", mid = "white", low = "#E56A1C") +
labs(title = "Correlacion entre indicadores medidos",
subtitle = "ordenados segun PC1/PC2") +
theme_tfm() +
theme(axis.line = element_blank())
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- princomp(na.omit(datos_pca), scores = T)
fviz_eig(pca)
fviz_pca_var(pca)
View(pca)
=princomp()
?princomp()
print(pca)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(na.omit(datos_pca), scores = T)
fviz_eig(pca)
fviz_pca_var(pca)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(na.omit(datos_pca))
View(pca)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(na.omit(datos_pca). scale = T)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(na.omit(datos_pca), scale = T)
fviz_eig(pca)
fviz_pca_var(pca)
barplot(as.vector(pca$sdev)/sum(pca$sdev))
fviz_eig(pca)
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:2])
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:3])
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:4])
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:5])
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:6])
sum((as.vector(pca$sdev)/sum(pca$sdev))[1:3])
plot(pca)
barplot(as.vector(pca$rotation)/sum(pca$rotation)) # Lo mismo en cutre
biplot.prcomp(pca)
biplot(pca)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(datos_pca, scale = T)
# Tercer paso: aplicar princomp() sobre la matriz de correlacion para ejecutar el analisis de componentes principales
pca <- prcomp(na.omit(datos_pca), scale = T)
biplot(pca)
# Intentar hacerlo con vegan
library(vegan)
rda(datos_pca)
rda(na.omit(datos_pca))
rda(na.omit(datos_pca), scale = TRUE)
barplot(as.vector(PCA$CA$eig)/sum(PCA$CA$eig))
PCA <- rda(na.omit(datos_pca), scale = TRUE)
barplot(as.vector(PCA$CA$eig)/sum(PCA$CA$eig))
sum((as.vector(PCA$CA$eig)/sum(PCA$CA$eig))[1:2]) # 79%, this is ok.
plot(PCA, display = "sites", type = "points")
plot(PCA, display = "species", type = "text")
plot(PCA)
plot(PCA, display = "sites", type = "points")
plot(PCA)
biplot(PCA, choices = c(1,2), type = c("text", "points"), xlim = c(-5,10)) # biplot of axis 1 vs 2
biplot(PCA, choices = c(1,2), type = c("text", "points"), xlim = c(-5,10)) # biplot of axis 1 vs 2
biplot(PCA, choices = c(1,2), type = c("text", "points"), xlim = c(-5,10)) + theme_tfm()
