plots[3]
plots[3] + labs(title = "A") + theme(plot.title = element_text(size = 14, face = bold))
plots[3] + labs(title = "A")
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9),
plot.title = element_text(size = 14, face = bold),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0),
axis.title = element_text(size = 12),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
i
str_detect(i, "tent")
str_detect(i, "pie")
(p <- barras_tfm())
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold"),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0),
axis.title = element_text(size = 12),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
(p <- barras_tfm())
(p <- barras_tfm()) + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ ""))
# Bucle construccion de estadisticos de resumen, grafica y test post hoc Tukey
for (n in c(1:18)) {
i <- colnames(datos[4:21])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm()) + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ ""))
saveRDS(p, paste0("./resultados/graficas2/", i, "_RDS"))
ggsave(paste0("./resultados/graficas2/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)
}
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold", hjust = 1),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0),
axis.title = element_text(size = 12),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
# Bucle construccion de estadisticos de resumen, grafica y test post hoc Tukey
for (n in c(1:18)) {
i <- colnames(datos[4:21])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm()) + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ ""))
saveRDS(p, paste0("./resultados/graficas2/", i, "_RDS"))
ggsave(paste0("./resultados/graficas2/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)
}
# Problema: no salen los puntos de datos
# Solo se conservan en 3 graficas por algun motivo que no entiendo.
library(patchwork)
plots <- list()
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
print(c(i,n))
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
plots <- lapply(colnames(datos[4:21]), function(x){readRDS(paste0("./resultados/graficas2/", x, "_RDS"))})
(p2 <- wrap_plots(plots[3:4]))
plots[2]
plots[[5]]
# Bucle construccion de estadisticos de resumen, grafica y test post hoc Tukey
for (n in c(1:18)) {
i <- colnames(datos[4:21])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm() + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ "")))
saveRDS(p, paste0("./resultados/graficas2/", i, "_RDS"))
ggsave(paste0("./resultados/graficas2/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)
}
# Problema: no salen los puntos de datos
# Solo se conservan en 3 graficas por algun motivo que no entiendo.
plots <- list()
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
print(c(i,n))
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
plots <- lapply(colnames(datos[4:21]), function(x){readRDS(paste0("./resultados/graficas2/", x, "_RDS"))})
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
plots <- lapply(colnames(datos[4:21]), function(x){readRDS(paste0("./resultados/graficas2/", x, "_RDS"))})
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
plots <- lapply(colnames(datos[4:21]), function(x){readRDS(paste0("./resultados/graficas2/", x, "_RDS"))})
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
# Problema: no salen los puntos de datos
# Solo se conservan en 3 graficas por algun motivo que no entiendo.
plots <- list()
for (n in c(1:18)){
i <- colnames(datos[4:21])[[n]]
plots[[i]] <- readRDS(paste0("./resultados/graficas2/", i, "_RDS"))
}
# Problema: no salen los puntos de datos
# Solo se conservan en 3 graficas por algun motivo que no entiendo.
plots <- list()
plots <- lapply(colnames(datos[4:21]), function(x){readRDS(paste0("./resultados/graficas2/", x, "_RDS"))})
View(plots)
(p2 <- wrap_plots(plots[3:4]))
ggsave(paste0("./resultados/graficas3/SOD.png"), width = 1800, height = 112.5, units = "mm", dpi = 1000)
ggsave(paste0("./resultados/graficas3/SOD.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
(p3 <- wrap_plots(plots[5:6]))
View(datos)
# GST
(p4 <- wrap_plots(plots[7:8]))
ggsave(paste0("./resultados/graficas3/GST.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
# DTD
(p5 <- wrap_plots(plots[9:10]))
ggsave(paste0("./resultados/graficas3/DTD.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
t
t
# G6PDH
(p6 <- wrap_plots(plots[11:12]))
ggsave(paste0("./resultados/graficas3/G6PDH.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
# MDA
(p7 <- wrap_plots(plots[13:14]))
ggsave(paste0("./resultados/graficas3/MDA.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
# TEAC
(p8 <- wrap_plots(plots[17:18]))
ggsave(paste0("./resultados/graficas3/TEAC.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
MODELO
summary(modelos[[3]])
summary(modelos[3])
summary(modelos[[3]])
summary(modelos[[4]])
?t.test
t.test(datos$SOD.pie, datos$SOD.tent, paired = T)
shapiro.test(datos$SOD.pie)
shapiro.test(datos$SOD.tent)
leveneTest(t.test(datos$SOD.pie, datos$SOD.tent, paired = T))
t.test(datos$SOD.pie, datos$SOD.tent, paired = T)
View(p3)
# SOD
(p2 <- wrap_plots(plots[3:4]))
ggsave(paste0("./resultados/graficas3/SOD.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
# CAT
(p3 <- wrap_plots(plots[5:6]))
ggsave(paste0("./resultados/graficas3/CAT.png"), width = 180, height = 112.5, units = "mm", dpi = 1000)
modelos[[5]]
summary(modelos[[5]])
summary(modelos[[6]])
t.test(datos$CAT.pie, datos$CAT.tent, paired = T)
t.test(datos$GST.pie, datos$GST.tent, paired = T)
t.test(datos$DTD.pie, datos$DTD.tent, paired = T)
t.test(datos$G6PDH.pie, datos$G6PDH.tent, paired = T)
t.test(datos$MDA.pie.2, datos$MDA.tent.2, paired = T)
t.test(datos$TEAC.pie, datos$TEAC.tent, paired = T)
summary(modelos[[7]])
summary(modelos[[8]])
summary(modelos[[9]])
summary(modelos[[10]])
summary(modelos[[11]])
summary(modelos[[12]])
t.test(datos$G6PDH.pie, datos$G6PDH.tent, paired = T)
summary(modelos[[17]])
summary(modelos[[13]])
summary(modelos[[14]])
summary(modelos[[15]])
summary(modelos[[16]])
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold", hjust = 1, family = "Helvetica"),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0),
axis.title = element_text(size = 12),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
?element_text()
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9, family = "Helvetica"),
plot.title = element_text(size = 14, face = "bold", hjust = 1, family = "Helvetica"),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0, family = "Helvetica"),
axis.title = element_text(size = 12, family = "Helvetica"),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
# Bucle construccion de estadisticos de resumen, grafica y test post hoc Tukey
for (n in c(1:18)) {
i <- colnames(datos[4:21])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm() + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ "")))
saveRDS(p, paste0("./resultados/graficas2/", i, "_RDS"))
ggsave(paste0("./resultados/graficas2/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)
}
## Definicion del tema y formato de las graficas ----
theme_tfm <- function(){
theme(panel.background = element_rect(fill = "gray99"),
axis.text = element_text(size = 9),
plot.title = element_text(size = 14, face = "bold", hjust = 1),
strip.text.x = element_text(size = 12, face = "bold", vjust = 0),
axis.title = element_text(size = 12),
legend.position = "none",
panel.grid = element_blank(),
axis.line = element_line(colour = "gray10"),
axis.ticks = element_line(color = "gray10"))
#strip.background = element_rect(colour = "black")
}
# Bucle construccion de estadisticos de resumen, grafica y test post hoc Tukey
for (n in c(1:18)) {
i <- colnames(datos[4:21])[[n]]
tabla_summ <- datos %>%  group_by(tratamiento) %>%
summarise(media = mean(get(i), na.rm = T),
desvest = sd(get(i), na.rm = T),
error = desvest/sqrt(sum(!is.na(get(i)))))
if ((summary(modelos[[n]])[[1]][["Pr(>F)"]][1]) <= 0.05) {
tukey_loop <- TukeyHSD(modelos[[n]])
cld.tukey <- multcompLetters4(modelos[[n]], tukey_loop, reversed = T)
(letras <- rownames_to_column(as.data.frame(cld.tukey$tratamiento$Letters)))
colnames(letras) <- c("tratamiento", "tukey")
tabla_summ <- merge(tabla_summ, letras)
} else {
tabla_summ$tukey <- c("", "", "", "")
}
(p <- barras_tfm() + labs(title = case_when(str_detect(i, "pie") == T  ~ "A",
str_detect(i, "tent") == T ~ "B",
TRUE ~ "")))
saveRDS(p, paste0("./resultados/graficas2/", i, "_RDS"))
ggsave(paste0("./resultados/graficas2/", i, ".png"), width = 90, height = 112.5, units = "mm", dpi = 1000)
}
### SETUP ----
library(tidyverse)
library(psych) #correlacion
library(MVN)
library(factoextra)
#setwd("C:/Users/Usuario/Documents/GitHub/TFM-Anemonia-sulcata")
setwd("D:/collf/Documents/GitHub/TFM-Anemonia-sulcata") #portatil
setwd("C:/Users/Usuario/Documents/GitHub/TFM-Anemonia-sulcata")
#source(file = "./scripts_enero_2024/0_data_lab.R") # Laboratorio
source(file = "./scripts_enero_2024/0_data_home.R") # portatil
setwd("C:/Users/Usuario/Documents/GitHub/TFM-Anemonia-sulcata")
source(file = "./scripts_enero_2024/0_data_lab.R") # Laboratorio
source(file = "./scripts_enero_2024/1_funciones_graficas.R")
ggthemr("fresh")
# Primera medida de MDA no vale
# Proteina es linealmente dependiente del resto de enzimas
datos <- datos %>% select(-c(MDA.pie, MDA.tent, proteina.pie, proteina.tent)) %>%
rename(MDA.col = MDA.pie.2, MDA.tent = MDA.tent.2,
SOD.col = SOD.pie, CAT.col = CAT.pie,
GST.col = GST.pie, DTD.col = DTD.pie,
G6PDH.col = G6PDH.pie, TEAC.col = TEAC.pie)
### Matriz de correlacion ----
datos_cor <- cor(datos[,6:19])
cor.plot(datos_cor)
det(datos_cor)
mvn(datos[,6:19], mvnTest = "mardia") # Sin proteina ni clorofila, el conjunto de datos es normal
cortest.bartlett(datos[,6:19], nrow(datos))
KMO(datos_cor) # 0.49 global, aceptable. GST tent, G6PDH tent y TEAC tent tienen poca correlacion parcial con el resto pero aportan informcion importante.
### Modelo PCA y eleccion de numero de componentes ----
cp <- princomp(~., data = datos[,6:19], cor = TRUE)
cp$loadings
write.csv2(cp$loadings, file = "./resultados/cargas.factoriales.csv")
summary(cp)
# 5 componentes ya superan 70 % varianza
screeplot(cp, type = "lines") # 4 componentes
cp$sdev^2 # 5 componentes segun regla de Kaiser
(biplot <- fviz_pca_biplot(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
alpha.var = "cos2", col.var = "gray20",
repel = TRUE, label = "var", ggtheme = theme_tfm()))
(indplot <- fviz_pca_ind(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
addEllipses = T, legend.title = "Treatment",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#0c8890", "#54B65D","#E56A1C"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#111111", "#B8B8B8"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#B8B8B8", "#111111"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#D6D6D6", "#111111"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#B8B8B8", "#111111"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
?fviz_pca_var()
(varplot <- fviz_pca_var(cp, col.var = "contrib",
alpha.var = "cos2",
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
alpha.var = "contrib",
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
alpha.var = "contrib",
repel = TRUE,
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp,
alpha.var = "contrib",
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(indplot <- fviz_pca_ind(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
addEllipses = T, legend.title = "Treatment",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(biplot <- fviz_pca_biplot(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
alpha.var = "cos2", col.var = "gray20",
repel = TRUE, label = "var", ggtheme = theme_tfm()))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#54B65D","#E56A1C"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#54B65D","#E56A1C", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#54B65D","#FBBC4C", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
### Modelo PCA y eleccion de numero de componentes ----
cp <- princomp(~., data = datos[,6:19], cor = TRUE)
cp$loadings
write.csv2(cp$loadings, file = "./resultados/cargas.factoriales.csv")
summary(cp)
(indplot <- fviz_pca_ind(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
addEllipses = T, legend.title = "Treatment",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
datos_scl <- scale(datos[-8,6:19])
#datos_scl <- datos_scl[-8,]
distancia <- dist(datos_scl)
ac <- hclust(distancia)
plot(ac)
fviz_nbclust(datos_scl, kmeans, method = "wss")
set.seed(999)
ac.2 <- kmeans(as.matrix(datos_scl), 3)
ac.2
fviz_cluster(ac.2, datos_scl, ellipse.type = "norm")
(biplot <- fviz_pca_biplot(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
alpha.var = "cos2", col.var = "gray20",
repel = TRUE, label = "var", ggtheme = theme_tfm()))
(indplot <- fviz_pca_ind(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
addEllipses = T, legend.title = "Treatment",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#0c8890","#54B65D", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right"))
(p1 <- varplot + indplot )
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#0c8890","#54B65D", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right") +
labs(title = "A"))
(indplot <- fviz_pca_ind(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
addEllipses = T, legend.title = "Treatment",
ggtheme = theme_tfm()) +
theme(legend.position = "right") + labs(title = "B"))
library(patchwork)
(p1 <- varplot + indplot )
ggsave("./resultados/graficas3/PCA_doble.png", width = 190, height = 112.5, units = "mm", dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 190, height = 112.5, units = "mm", #para clorofila 730, 730
scale = 2, dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 190, height = 112.5, units = "mm", #para clorofila 730, 730
scale = 1.2, dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 112.5, units = "mm", #para clorofila 730, 730
scale = 1.3, dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 270, height = 169.75, units = "mm", dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 112.5, units = "mm", dpi = 1000)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 112.5, units = "mm", dpi = 1000, scale = 1.25)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 100, units = "mm", dpi = 1000, scale = 1.25)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 50, units = "mm", dpi = 1000, scale = 1.25)
(p1 <- wrap_plots(varplot + indplot ))
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 50, units = "mm", dpi = 1000, scale = 1.25)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 90, units = "mm", dpi = 1000, scale = 1.25)
ggsave("./resultados/graficas3/PCA_doble.png", width = 180, height = 80, units = "mm", dpi = 1000, scale = 1.25)
### Modelo PCA y eleccion de numero de componentes ----
cp <- princomp(~., data = scale(datos[,6:19]), cor = TRUE)
### Modelo PCA y eleccion de numero de componentes ----
cp2 <- princomp(~., data = as.data.frame(scale(datos[,6:19])), cor = TRUE)
cp$loadings
cp2$loadings
(biplot <- fviz_pca_biplot(cp, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
alpha.var = "cos2", col.var = "gray20",
repel = TRUE, label = "var", ggtheme = theme_tfm()))
(biplot <- fviz_pca_biplot(cp2, col.ind = datos$tratamiento,
palette = c("#0c8890", "#54B65D","#E56A1C", "#FBBC4C"),
alpha.var = "cos2", col.var = "gray20",
repel = TRUE, label = "var", ggtheme = theme_tfm()))
(varplot <- fviz_pca_var(cp, col.var = "contrib",
gradient.cols = c("#0c8890","#54B65D", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right") + labs(title = "A"))
(varplot <- fviz_pca_var(cp2, col.var = "contrib",
gradient.cols = c("#0c8890","#54B65D", "#D42828"),
repel = TRUE, legend.title = "Contribution",
ggtheme = theme_tfm()) +
theme(legend.position = "right") + labs(title = "A"))
