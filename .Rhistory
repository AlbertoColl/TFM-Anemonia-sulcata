ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
colourpicker:::colourPickerAddin()
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "##383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_hline(yintercept = 0, color = "red") +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 8) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 9) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
(plot_output <- ggplot(lm_output, aes(x = species, y = slope)) +
geom_hline(yintercept = 0, color = "red") +
geom_errorbar(aes(x = species, ymin = slope-slope.error, ymax = slope+slope.error),
width = 0.1, color = "#383838") +
geom_point(aes(color = species), shape = "diamond", size = 10) +
scale_color_manual(values = bird_palette) +
labs(title = "Slopes for Linear Model:\n Breeding Success ~ Year") +
xlab("Species") +
ylab("Slope") +
theme_custom() +
theme(legend.position = "none",
panel.grid.major.x = element_blank(),
plot.title = element_text(size = 18, hjust = 0.5),
axis.title = element_text(size = 14),
axis.text = element_text(size = 10, face = "bold.italic")))
ggsave("C:\Users\collf\Documents\plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, heigth = 500, limitsize = F)
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
setwd("C:/Users/collf/Documents/")
ggsave("C:/Users/collf/Documents/plot.png", width = 600, height = 500, limitsize = F)
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
# Y ahora lapply los modelos + tidy/glance para sacar parametros, error y r2
lm_estimates <- lapply(by_species, function(x){
broom::tidy(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1:2,1:5]
})
View(lm_estimates)
lm_estimates
lm_goodness <- lapply(by_species, function(x){
broom::glance(lm(x$breedingSuccess ~ I(x$year-1981), data = x))[1,1:2]
})
lm_goodness
mt <- matrix(1:6,3,2)
mt[,-1]
a <- c(3,0,T)
b <- c(4,0,F)
c <- (a|b)
c
x <- c(2L, 3L, 4L, 15L, 23L, 43L)
typeof(median(x))
x <- as.Date("2018-10-01")
x
months(x)
month(x)
v <- 1:Â·
v <- 1:3
names(v) <- c("a", "b", "c")
v[4] <- 4
v
install.packages("igraph")
v1 <- 1:5
v2 <- rep(1,5)
v1+v2
v2 <- v1+v2
v2 <- v1+v2
v2 <- v1+v2
cor(v1,v2)
library(igraph)
g1 <- graph(edges = c(1,2, 2,3, 3,1 ), n = 3)
g1
plot(g1)
a <- c(1,2, 2,3, 3,1 )
g1 <- graprh(c("John", "Jean", "Jim"), )
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), n = 3, directed = F)
g1 <- graph(c("John","Jean", "Jean","Jim", "Jim","John"), directed = F)
plot(g1)
g1
E(g1)
View(g1)
V(g1)
g1[]
install.packages("enaR")
library("enaR")
version
sessioninfo()
sessionInfo()
## SETUP ----
library(tidyverse)
library(ggthemr)
library(broom)
library(car)
library(multcompView)
ggthemr("fresh")
### SETUP ----
library(tidyverse)
install.packages("installr")
library(installr)
updateR()
### SETUP ----
library(tidyverse)
install.packages("tinytex")
tinytex::install_tinytex()
tinytex::install_tinytex()
setwd("D:\collf\Documents")
setwd("D:\collf\Documents")
setwd("D:/collf/Documents")
datos <- read.csv("Results.csv")
View(datos)
hist(datos, Area)
hist(datos$Area)
library(ggplot2)
p <- ggplot(datos) +
geom_histogram(aes(x = Area))
(p <- ggplot(datos) +
geom_histogram(aes(x = Area))
)
geom_histogram(aes(x = log(Area))
(p <- ggplot(datos) +
(p <- ggplot(datos) +
geom_histogram(aes(x = log(Area)))
)
(p <- ggplot(datos) +
geom_point(aes(x = Area, y = Circ.))
)
(p <- ggplot(datos) +
geom_point(aes(x = log(Area), y = Circ.))
)
install.packages("installr")
library(installr)
updateR()
installed.packages()
install.packages("tidyverse")
### SETUP ----
library(tidyverse)
library(car)
library(multcompView)
setwd("D:/collf/Documents/GitHub/TFM-Ortiguilla")
datos <- read.csv2("./datos/datos_peso.csv", numerals = "warn.loss", encoding = "latin1")%>%
mutate(tratamiento = as.factor(tratamiento))
summary(datos)
# Necesito poner inicial y final como otra variable, medida
datos <- datos %>% gather(c(peso.inicial, peso.final), key = medida, value = peso)
datos$medida <- as.factor(datos$medida)
levels(datos$medida) <- c("final", "inicial")
datos$medida <- factor(datos$medida, levels = c("inicial", "final"))
datos$tratamiento <- factor(datos$tratamiento, levels = c("Control", "Oscuro", "Salobre", "IMTA"))
summary(datos)
### Grafica de barras: media y SEM ----
resumen <- datos %>%
group_by(tratamiento, medida) %>%
summarise(media = mean(peso, na.rm = T),
desvest = sd(peso, na.rm = T),
error = desvest/sqrt(sum(!is.na(peso))),
n = sum(!is.na(peso)),
mediana = median(peso, na.rm = T),
minimo = min(peso, na.rm =T),
maximo = max(peso, na.rm = T))
View(resumen)
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento:medida, datos)
summary(m.peso)
plot(m.peso)
(tabla_anova <- Anova(m.peso, type = 2))
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento*medida, datos)
summary(m.peso)
(tabla_anova <- Anova(m.peso, type = 2))
a <- aov(peso ~ tratamiento * medida, datos)
tukey <- TukeyHSD(m.peso)
tukey <- TukeyHSD(a)
cld.tukey <- multcompLetters4(a, tukey, reversed = T)
View(cld.tukey)
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento*medida, data = filter(datos, medida = inicial))
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento*medida, data = filter(datos, medida == inicial))
View(datos)
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento*medida, data = filter(datos, medida == "inicial"))
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento, data = filter(datos, medida == "inicial"))
summary(m.peso)
(tabla_anova <- Anova(m.peso, type = 2))
cld.tukey$`tratamiento:medida`
cld.tukey$`tratamiento:medida`$Letters
as.data.frame(cld.tukey$`tratamiento:medida`$Letters)
rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
str_split("Oscuro:final", ":")
str_split("Oscuro:final", ":")[1]
str_split("Oscuro:final", ":")[[1]]
str_split("Oscuro:final", ":")[1][1]
str_split("Oscuro:final", ":")[2]
sub("\\:.*", "", "Control:final")
sub("\\:.*", "", "Control:final")
View(letras)
colnames(letras)
?strsplit()
sub("\\:.*", "", "Control:final")
str_split("Oscuro:final", ":")[1][1]
str_split("Oscuro:final", ":")[[1]]
str_split("Oscuro:final", ":")[[1,1]]
str_split("Oscuro:final", ":")[[,1]]
str_split("Oscuro:final", ":")[[1,]]
str_split("Oscuro:final", ":")[[2]]
str_split("Oscuro:final", ":")[[1]]
str_split("Oscuro:final", ":")[[1]][1]
str_split("Oscuro:final", ":")[[1]][2]
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[[1]][1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2])
View(letras)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[[1]][1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2]) %>%
select(tratamiento, medidas, letras)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[[1]][1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2]) %>%
select(tratamiento, medida, letras)
merge(resumen, letras)
merge(resumen, letras)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[[1]][1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2])
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2]) %>%
select(tratamiento, medida, letras)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters)) %>%
mutate(tratamiento = str_split(rowname, ":")[1],
letras = cld.tukey$`tratamiento:medida`$Letters,
medida = str_split(rowname, ":")[[1]][2])
letras$rowname
tratamiento = str_split(letras$rowname, ":")[[1]]
str_split(letras$rowname, ":")[1]
str_split(letras$rowname, ":")
str_split(letras$rowname, ":")[,1]
str_split(letras$rowname, ":")[[]][2]
str_split(letras$rowname, ":")[[1]][2]
str_split(letras$rowname, ":")[[2]][2]
str_split(letras$rowname, ":")[[3]][2]
split(str_split(letras$rowname, ":"))
split(str_split(letras$rowname, ":"), f = 3)
split(str_split(letras$rowname, ":"), f = 1)
letras <- letras %>%
mutate(tratamiento = str_split(rowname, ":"))
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(tratamiento = str_split(rowname, ":")
a <- aov(peso ~ tratamiento * medida, datos)
tukey <- TukeyHSD(a)
cld.tukey <- multcompLetters4(a, tukey, reversed = T)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(tratamiento = str_split(rowname, ":"))
letras <- letras %>%
mutate(tratamiento = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(tratamiento = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
letras$rowname[1]
c("Oscuro", "Final")
c("Oscuro", "Final")[1]
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[1],
medida = rowname[2])
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[[1]],
medida = rowname[[2]])
c("Oscuro", "Final")[1]
c("Oscuro", "Final")[2]
c("Oscuro", "final")[2]
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[][1],
medida = rowname[[2]])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[][1],
medida = rowname[][2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[[]][1],
medida = rowname[[]][2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname [1],
medida = rowname [2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[1],
medida = rowname[2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[,1],
medida = rowname[2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[,1],
medida = rowname[,2])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[][1],
medida = rowname[,2])
tratamiento = rowname[][[1],
medida = rowname[][[2]])
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[][[1]],
medida = rowname[][[2]])
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[][[1]],
medida = rowname[][[2]])
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters,
tratamiento = rowname[.][[1]],
medida = rowname[][[2]])
length(letras$rowname)
leras$rowname[5]
letras$rowname[5]
letras$rowname[5][1]
letras$rowname[[5]][1]
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
letras$rowname[[5]][1]
letras$rowname[5][1]
letras$rowname[[5]][1]
letras$tratamiento[n] <- letras$rowname[[n]][1]
for (n in length(letras$rowname)) {
letras$tratamiento[n] <- letras$rowname[[n]][1]
letras$medida = letras$rowname[[n]][2]
}
merge(resumen, letras)
for (n in length(letras$rowname)) {
letras$tratamiento[n] <- letras$rowname[[n]][1]
letras$medida = letras$rowname[[n]][2]
}
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
for (n in length(letras$rowname)) {
letras$tratamiento[n] <- letras$rowname[[n]][1]
letras$medida = letras$rowname[[n]][2]
}
for (n in length(letras$rowname)) {
letras$tratamiento[[n]] <- letras$rowname[[n]][1]
letras$medida[[n]] = letras$rowname[[n]][2]
}
letras <- rownames_to_column(as.data.frame(cld.tukey$`tratamiento:medida`$Letters))
letras <- letras %>%
mutate(rowname = str_split(rowname, ":"),
letras = cld.tukey$`tratamiento:medida`$Letters)
for (n in length(letras$rowname)) {
letras$tratamiento[[n]] <- letras$rowname[[n]][1]
letras$medida[[n]] = letras$rowname[[n]][2]
}
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento, data = filter(datos, medida == "inicial"))
summary(m.peso)
tukey(m.peso)
TukeyHSD(m.peso)
TukeyHSD(Anova(m-peso, type = "2")
)
TukeyHSD(Anova(m.peso, type = "2"))
TukeyHSD(aov(m.peso))
multcompLetters4(m.peso, TukeyHSD(aov(m.peso)), reversed = T)
# No siguen distribucion normal, estan sesgados a la derecha por lo que usamos distribucion gamma con glm()
m.peso <- glm(family = Gamma(), peso ~ tratamiento*medida, datos)
summary(m.peso)
TukeyHSD(aov(m.peso))
multcompLetters4(m.peso, TukeyHSD(aov(m.peso)), reversed = T)
cld <- multcompLetters4(m.peso, TukeyHSD(aov(m.peso)), reversed = T)
letras <- rownames_to_column(as.data.frame(cld$`tratamiento:medida`$Letters))
tukey <- TukeyHSD(aov(m.peso))
tukey <- TukeyHSD(tabla_anova))
tukey <- TukeyHSD(tabla_anova)
aov(m.peso)
class(aov(m.peso))
class(Anova(m.peso, type = 2))
as.aov(Anova(m.peso, type = 2))
(tabla_anova <- Anova(m.peso, type = 2))
